// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repo/contracts.go

// Package repo is a generated GoMock package.
package repo

import (
	entity "hw_4_1/internal/entity"
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUrlRepo is a mock of UrlRepo interface.
type MockUrlRepo struct {
	ctrl     *gomock.Controller
	recorder *MockUrlRepoMockRecorder
}

// MockUrlRepoMockRecorder is the mock recorder for MockUrlRepo.
type MockUrlRepoMockRecorder struct {
	mock *MockUrlRepo
}

// NewMockUrlRepo creates a new mock instance.
func NewMockUrlRepo(ctrl *gomock.Controller) *MockUrlRepo {
	mock := &MockUrlRepo{ctrl: ctrl}
	mock.recorder = &MockUrlRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUrlRepo) EXPECT() *MockUrlRepoMockRecorder {
	return m.recorder
}

// GetUrls mocks base method.
func (m *MockUrlRepo) GetUrls() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUrls")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUrls indicates an expected call of GetUrls.
func (mr *MockUrlRepoMockRecorder) GetUrls() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUrls", reflect.TypeOf((*MockUrlRepo)(nil).GetUrls))
}

// MockScrapeResultsRepo is a mock of ScrapeResultsRepo interface.
type MockScrapeResultsRepo struct {
	ctrl     *gomock.Controller
	recorder *MockScrapeResultsRepoMockRecorder
}

// MockScrapeResultsRepoMockRecorder is the mock recorder for MockScrapeResultsRepo.
type MockScrapeResultsRepoMockRecorder struct {
	mock *MockScrapeResultsRepo
}

// NewMockScrapeResultsRepo creates a new mock instance.
func NewMockScrapeResultsRepo(ctrl *gomock.Controller) *MockScrapeResultsRepo {
	mock := &MockScrapeResultsRepo{ctrl: ctrl}
	mock.recorder = &MockScrapeResultsRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScrapeResultsRepo) EXPECT() *MockScrapeResultsRepoMockRecorder {
	return m.recorder
}

// SaveResults mocks base method.
func (m *MockScrapeResultsRepo) SaveResults(arg0 []entity.ScrapeResult) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveResults", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveResults indicates an expected call of SaveResults.
func (mr *MockScrapeResultsRepoMockRecorder) SaveResults(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveResults", reflect.TypeOf((*MockScrapeResultsRepo)(nil).SaveResults), arg0)
}

// MockPageDownloader is a mock of PageDownloader interface.
type MockPageDownloader struct {
	ctrl     *gomock.Controller
	recorder *MockPageDownloaderMockRecorder
}

// MockPageDownloaderMockRecorder is the mock recorder for MockPageDownloader.
type MockPageDownloaderMockRecorder struct {
	mock *MockPageDownloader
}

// NewMockPageDownloader creates a new mock instance.
func NewMockPageDownloader(ctrl *gomock.Controller) *MockPageDownloader {
	mock := &MockPageDownloader{ctrl: ctrl}
	mock.recorder = &MockPageDownloaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPageDownloader) EXPECT() *MockPageDownloaderMockRecorder {
	return m.recorder
}

// DownloadPage mocks base method.
func (m *MockPageDownloader) DownloadPage(url string) (io.Reader, io.Closer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadPage", url)
	ret0, _ := ret[0].(io.Reader)
	ret1, _ := ret[1].(io.Closer)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DownloadPage indicates an expected call of DownloadPage.
func (mr *MockPageDownloaderMockRecorder) DownloadPage(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadPage", reflect.TypeOf((*MockPageDownloader)(nil).DownloadPage), url)
}
